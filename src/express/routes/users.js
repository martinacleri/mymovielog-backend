const { models } = require('../../sequelize');
const { getIdParam } = require('../helpers');
const bcrypt = require('bcrypt');

async function getAll(req, res) {
    try {
        const users = await models.user.findAll();
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ error: 'Error fetching users', details: error.message });
    }
}

async function getById(req, res) {
    const id = getIdParam(req);
    try {
        const user = await models.user.findByPk(id);
        if (user) {
            res.status(200).json(user);
        } else {
            res.status(404).json({ error: 'User not found' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Error fetching user', details: error.message });
    }
}

async function create(req, res) {
    try {
        if (req.body.id) {
            return res.status(400).json({ error: 'Bad request: ID should not be provided, as it is auto-generated by the database.' });
        }

        if (!req.body.username || !req.body.email || !req.body.password) {
            return res.status(400).json({ error: 'Missing required fields: username, email, password'});
        }
        
        const hashedPassword = await bcrypt.hash(req.body.password, 10);

        const newUser = await models.user.create({
            username: req.body.username, email: req.body.email, password: hashedPassword
        });
        res.status(201).json(newUser);
    } catch (error) {
        res.status(500).json({ error: 'Error creating user', details: error.message });
        console.log("ERROR")
        console.log(error.message)
    }
}

async function update(req, res) {
    const id = getIdParam(req);
    try {
        if (req.body.id === id) {
            const [updated] = await models.user.update(req.body, { where: { id } });
            if (updated) {
                res.status(200).json({ message: 'User updated successfully' });
            } else {
                res.status(404).json({ error: 'User not found' });
            }
        } else {
            res.status(400).json({ error: 'Bad request: param ID (${id}) does not match body ID (${req.body.id}).' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Error updating user', details: error.message });
    }
}

async function remove(req, res) {
    const id = getIdParam(req);
    try {
        const deleted = await models.user.destroy({ where: { id } });
        if (deleted) {
            res.status(200).json({ message: 'User deleted successfully' });
        } else {
            res.status(404).json({ error: 'User not found' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Error deleting user', details: error.message });
    }
}

module.exports = {
    getAll,
    getById,
    create,
    update,
    remove,
};